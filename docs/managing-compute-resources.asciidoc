[id="{p}-managing-compute-resources"]
== Managing compute resources

When a Pod is created, it might request CPU and RAM resources. It might also specify the maximum resources that the containers are allowed to consume. Both Pod `limits` and `requests` can be set in the specification of the object managed by the operator: Elasticsearch, Kibana or the APM server. For more information, see https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/[Managing Compute Resources for Containers].

Then, you can set both `requests` and `limits` in the specification 

[float]
[id="{p}-custom-resources"]
=== Set custom resources

You can customize the `resources` in the `podTemplate` of the object. Here is an example for Elasticsearch:

[source,yaml]
----
spec:
  nodes:
  - podTemplate:
      spec:
        containers:
        - name: elasticsearch
          env:
          - name: ES_JAVA_OPTS
            value: -Xms2048M -Xmx2048M
          resources:
            requests:
              memory: 2Gi
              cpu: 1
            limits:
              memory: 4Gi
              cpu: 2
----

This example also demonstrates how to set the JVM memory options, by using the environment variable `ES_JAVA_OPTS`.
You can set custom resources for every object managed by the operator. 

For Kibana:

[source,yaml]
----
spec:
  podTemplate:
    spec:
      containers:
      - name: kibana
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            memory: 2Gi
            cpu: 2
----

For APM server:

[source,yaml]
----
spec:
  podTemplate:
    spec:
      containers:
      - name: apm-server
        resources:
          requests:
            memory: 1Gi
            cpu: 1
          limits:
            memory: 2Gi
            cpu: 2
----

[float]
[id="{p}-default-behavior"]
=== Default behavior

If no `resources` is set in the specification of the object, then `requests` or `limits` are not applied to the containers, with the exception of Elasticsearch.
It is critical for Elasticsearch to have a minimum amount of memory to perform correctly. Therefore, if no memory requirement is set in the specification of Elasticsearch, the operator applies a default memory request of 2Gi. However, this can be a problem if the resources are https://kubernetes.io/docs/tasks/administer-cluster/manage-resources/memory-default-namespace/[managed with some LimitRanges at the namespace level] and if a minimum memory constraint is imposed.

For example, you can apply a default request of 3Gi and enforce it as a minimum with a constraint:

[source,yaml]
----
apiVersion: v1
kind: LimitRange
metadata:
  name: default-mem-per-container
spec:
  limits:
  - min:
      memory: "3Gi"
    defaultRequest:
      memory: "3Gi"
    type: Container
----

But if no `resources` is declared in the specification, the Pod can't be created and the following event is generated:

...................................
default     0s          Warning   Unexpected              elasticsearch/elasticsearch-sample                                            Cannot create pod elasticsearch-sample-es-ldbgj48c7r: pods "elasticsearch-sample-es-ldbgj48c7r" is forbidden: minimum memory usage per Container is 3Gi, but request is 2Gi
...................................

To solve this, you can declare an empty `limits` section in the specification:

[source,yaml]
----
spec:
  nodes:
  - podTemplate:
      spec:
        containers:
        - name: elasticsearch
          resources:
            # specify empty limits
            limits: {}
----

The default `requests` is not set by the operator and the Pod is created.
